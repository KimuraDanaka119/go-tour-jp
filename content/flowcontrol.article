Flow control statements: for, if, else, switch and defer
条件文とループ、switch、defer を使ってコードの流れをコントロールする方法を学びます。

The Go Authors
https://golang.org

* For

基本的に、 `for` ループはセミコロン `;` で3つの部分に分かれています:

- 初期化ステートメント: 最初のイテレーション(繰り返し)の前に初期化が実行されます
- 条件式: イテレーション毎に評価されます
- 後処理ステートメント: イテレーション毎の最後に実行されます

初期化ステートメントは、短い変数宣言によく利用します。その変数は `for` ステートメントのスコープ内でのみ有効です。

ループは、条件式の評価が `false` となった場合にイテレーションを停止します。

Note: 他の言語、C言語 や Java、JavaScriptの `for` ループとは異なり、 `for` ステートメントの3つの部分を括る括弧 `(`)` はありません。なお、中括弧 `{`}` は必要です。

.play flowcontrol/for.go

* For continued

初期化と後処理ステートメントの記述は任意です。

.play flowcontrol/for-continued.go

* For is Go's "while"

セミコロン(;)を省略することもできます。つまり、C言語などにある `while` は、Goでは `for` だけを使います。

.play flowcontrol/for-is-gos-while.go

* Forever

ループ条件を省略すれば、無限ループ( _infinite_loop_ )になりますので、無限ループをコンパクトに表現できます。

.play flowcontrol/forever.go

* If

Go言語の `if` ステートメントは、先ほどの `for` ループと同様に、括弧 `(`)` は不要で、中括弧 `{`}` は必要です。

(もうおなじみですね！)

.play flowcontrol/if.go

* If with a short statement

`if` ステートメントは、 `for` のように、条件の前に、評価するための簡単なステートメントを書くことができます。

ここで宣言された変数は、 `if` のスコープ内だけで有効です。

(ためしに最後の `return` 文で、 `v` を使ってみてください。
# 補足
スコープの外なので使えないですよね？)

.play flowcontrol/if-with-a-short-statement.go

* If and else

なお、 `if` ステートメントで宣言された変数は、 `else` ブロック内でも使うことができます。

(コードの補足: `main` の `fmt.Println` は、2つの `pow` が先に実行されてから実行されます)

.play flowcontrol/if-and-else.go

* Exercise: Loops and Functions

関数とループを使った簡単な練習として、 [[http://ja.wikipedia.org/wiki/%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%88%E3%83%B3%E6%B3%95][ニュートン法]] を使った平方根の計算を実装してみましょう。

ニュートン法は、開始点 _z_ を選び、以下の式を繰り返すことによって、 `Sqrt(x)` を近似します:

.image /content/img/newton.png

最初は、その計算式を10回だけ繰り返し、 `x` を(1, 2, 3, ...)と様々な値に対する結果がどれだけ正解値に近づくかを確認してみてください。

次に、ループを回すときの直前に求めたzの値がこれ以上変化しなくなったとき
(または、差がとても小さくなったとき)に停止するようにループを変更してみてください。
この変更により、ループ回数が多くなったか、少なくなったのか見てみてください。
[[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] と比べてどれくらい近似できましたか？

ヒント：浮動小数点の変数を初期化して宣言するには、型でキャストするか、浮動小数点を使ってみてください:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Goの `switch` は他の言語と比較して、大きく異なるかもしれません。

Goでのswitchは、 `case` の最後で自動的にbreakします。
もし、breakせずに通したい場合は、 `fallthrough` 文をcaseの最後に記述します。

.play flowcontrol/switch.go

* Switch evaluation order

switch caseは、上から下へcaseを評価します。
caseの条件が一致すれば、そこで停止(自動的にbreak)します。

(例えば、

	switch i {
	case 0:
	case f():
	}

では、 `i==0` であれば、 `case`0` でbreakされるため `f` は呼び出されません)

#appengine: Note: Go playground上の時間は、いつも "2009-11-10 23:00:00 UTC" です。
#appengine: この値の意味は、読者の楽しみのために残しておきます(^^)

.play flowcontrol/switch-evaluation-order.go

* Switch with no condition

条件のないswitchは、 `switch`true` と書くことと同じです。

このswitchの構造は、長くなりがちな "if-then-else" のつながりをシンプルに表現できます。

.play flowcontrol/switch-with-no-condition.go

* Defer

`defer` ステートメントは、 `defer` へ渡した関数の実行を、呼び出し元の関数の終わり(returnする)まで遅延させるものです。

`defer` へ渡した関数の引数は、すぐに評価されますが、その関数自体は呼び出し元の関数がreturnするまで実行されません。

.play flowcontrol/defer.go

* Stacking defers

`defer` へ渡した関数が複数ある場合、その呼び出しはスタック( _stack_ )されます。
呼び出し元の関数がreturnするとき、 `defer` へ渡した関数は [[https://ja.wikipedia.org/wiki/LIFO][LIFO(last-in-first-out)]] の順番で実行されます。

`defer` ステートメントについてさらに学ぶには、
[[https://blog.golang.org/defer-panic-and-recover][こちら(blog post)]]を読んでみてください。

.play flowcontrol/defer-multi.go

* Congratulations!

この章はこれで終わりです。

[[/list][章のリスト]]から学びたいところを見ても良いですし、
[[javascript:click('.next-page')][>]] をクリックして次の章へ進みましょう。
