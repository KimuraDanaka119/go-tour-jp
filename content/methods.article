Methods and interfaces
This lesson covers methods and interfaces, the constructs that define objects and their behavior.

The Go Authors
https://golang.org

* Methods

Goには、クラス( _class_ )のしくみはありませんが、struct型にメソッド( _method_ )を定義できます。

*メソッドレシーバ* ( _method_receiver_ )は、 `func` キーワードとメソッド名の間に、それ自身の引数を並べて表現します。
(例では、 `func`(v`*Vertex)`Abs()` の中で `(v`*Vertex)` がメソッドレシーバです)

.play methods/methods.go

* Methods continued

実際には、structだけではなく、パッケージ内で任意の型(type)にもメソッドを定義できます。

なお、他のパッケージの型や基本型にはメソッドを定義できません。

.play methods/methods-continued.go

* Methods with pointer receivers

メソッドは、名前付きの型( _named_type_ )、もしくは、名前付きの型へのポインタに割り当てることができます。

ここまでの話の中で、２つの `Abs` 関数が出てきました。
ひとつは、 `*Vertex` のポインタ型( _pointer_type_ )で、
もうひとつは、 `MyFloat` の値型( _value_type_ )です。

ポインタのレシーバ( _pointer_receiver_ )を使う理由が2つあります。
1つ目は、各メソッド呼び出しで、値をコピーするのを避けるためです(最も効果的なのは、値型が大きな構造体の場合です)。
2つ目は、そのメソッドは、そのレシーバが指している値を変更できるようになります。

`Abs` と `Scale` メソッドの定義を、 `*Vertex` の代わりに、レシーバとして `Vertex` を使って書き換えてみましょう。

`Scale` メソッドは、 `v` が `Vertex` の場合は効果がありません。
`Scale` は `v` を変化させようとしますが、 `v` が値(ポインタではない)型の場合は、メソッドは `Vertex` のコピーを参照しているため、元の値を変化させることはできません。

`Abs` は、どちらかの方法でもうまく動作します。
`Abs` は `v` を読み出すだけですので、元の値を(ポインタを通じて)読み出し続けるか、値のコピーをするかはたいした問題ではありません。

.play methods/methods-with-pointer-receivers.go

* Interfaces

interface(インタフェース)型は、メソッドの集まりで定義します。

そのメソッドの集まりを実装した値を、interface型の変数へ持たせることができます。

*注意:* この例は、22行目でエラーになります。
`Abs` メソッドが、 `Vertex` ではなく `*Vertex` の定義であり、
`Vertex` が `Abser` インタフェースを満たしていないということになるためエラーとなります。

.play methods/interfaces.go

* Interfaces are satisfied implicitly

型にメソッドを実装していくことによって、インタフェースを実装(満た)します。
インタフェースを実装することを明示的に宣言する必要はありません( "implements" キーワードは必要ありません)。

この暗黙的なインタフェースにより、インタフェースを定義するパッケージと、実装するパッケージとを分離する( _decouple_ )ことができ、依存しません。

これはまた、明瞭なインタフェースの定義づけを促します。
なぜなら、すべての実装を見つける必要はありませんし、新しいインタフェースの名前でそれを関連付ける必要もないからです。

[[https://golang.org/pkg/io/][ioパッケージ]] は、同じ `Reader` と `Writer` を既に定義していますので、実際はこのような定義は必要ありません。

(訳注： `fmt.Fprint` 関数の第一引数はioパッケージの `io.Writer` タイプであり、この例で定義した `Writer` と同じインタフェースをもっています。Goではインタフェースを実装していることを明示する必要がありませんので、このようなことが簡単に実現できます)

.play methods/interfaces-are-satisfied-implicitly.go

* Stringers

もっともよく使われているinterfaceの一つに [[//golang.org/pkg/fmt/][`fmt` パッケージ]] に定義されている [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] があります:

	type Stringer interface {
		String() string
	}

`Stringer` インタフェースは、stringとして表現することができる型です。
`fmt` パッケージ(と、多くのパッケージ)では、変数を文字列で出力するためにこのインタフェースがあることを確認します。

.play methods/stringer.go

* Exercise: Stringers

`IPAddr` 型を実装してみましょう
IPアドレスをドットで4つに区切った( _dotted_quad_ )表現で出力するため、 `fmt.Stringer` インタフェースを実装してください。

例えば、 `IPAddr{1,`2,`3,`4}` は、 `"1.2.3.4"` として出力するようにします。

.play methods/exercise-stringer.go

* Errors

Goのプログラムは、エラーの状態を `error` 変数で表現します。

`error` 型は `fmt.Stringer` に似た組み込みのインタフェースです:

	type error interface {
		Error() string
	}

( `fmt.Stringer` と同様に、 `fmt` パッケージは、変数を文字列で出力する際に `error` インタフェースを確認します。 )

よく、関数は `error` 変数を返します。そして、呼び出し元はエラーが `nil` かどうかを確認することでエラーをハンドル(取り扱い)します。

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

nil の `error` は成功したことを示し、 nilではない `error` は失敗したことを示します。

.play methods/errors.go

* Exercise: Errors

`Sqrt` 関数を [[/flowcontrol/8][以前の演習]] からコピーし、 `error` の値を返すように修正してみてください。

`Sqrt` は、複素数をサポートしていないので、負の値が与えられたとき、nil以外のエラー値を返す必要があります。

新しい型:

	type ErrNegativeSqrt float64

を作成してください。

そして、 `ErrNegativeSqrt(-2).Error()` で、 `"cannot`Sqrt`negative`number:`-2"` を返すような:

	func (e ErrNegativeSqrt) Error() string

メソッドを実装し、 `error` インタフェースを満たすようにします。

*注意:* `Error` メソッドの中で、 `fmt.Sprint(e)` を呼び出すことは、無限ループのプログラムになることでしょう。
最初に `fmt.Sprint(float64(e))` として `e` を変換しておくことで、これを避けることができます。
なぜでしょうか？

負の値が与えられたとき、 `ErrNegativeSqrt` の値を返すように `Sqrt` 関数を修正してみてください。

.play methods/exercise-errors.go

* Readers

`io` パッケージは、データストリームを読むことを表現する `io.Reader` インタフェースを規定しています。

Goの標準ライブラリには、インタフェース、ファイル、ネットワーク接続、圧縮、暗号化、などで [[https://golang.org/search?q=Read#Global][多くの実装]] があります。

`io.Reader` インタフェースは `Read`メソッドを持ちます:

	func (T) Read(b []byte) (n int, err error)

`Read` は、データを与えられたバイトスライスへ入れ、入れたバイトのサイズとエラーの値を返します。
ストリームの終端は、 `io.EOF` のエラーで返します。

例のコードは、 [[//golang.org/pkg/strings/#Reader][`strings.Reader`]] を作成し、
8 byte毎に読み出しています。

.play methods/reader.go

* Exercise: Readers

ASCII文字 `'A'` の無限ストリームを出力する `Reader` 型を実装してください。

.play methods/exercise-reader.go

* Exercise: rot13Reader

よくあるパターンは、別の `io.Reader` をラップし、ストリームの内容を何らかの方法で変換する[[https://golang.org/pkg/io/#Reader][io.Reader]]です。

例えば、 [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] は、 `io.Reader` (gzipされたデータストリーム)を引数で受け取り、 `*gzip.Reader` を返します。
その `*gzip.Reader` は、 `io.Reader` (展開したデータストリーム)を実装しています。

`io.Reader` を実装し、 `io.Reader` で[[https://ja.wikipedia.org/wiki/ROT13][ROT13]] 換字式暗号( _substitution_cipher_ )をすべてのアルファベットの文字に適用して読み出すように `rot13Reader` を実装してみてください。

`rot13Reader` 型は提供済みです。
この `Read` メソッドを実装することで `io.Reader` インタフェースを満たしてください。

.play methods/exercise-rot-reader.go

* Web servers

[[https://golang.org/pkg/net/http/][`http`]] パッケージは、 `http.Handler` インタフェースを実装した変数を用いることで、HTTPリクエストの処理機能を提供します:

	package http

	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

この例では、 `Hello` 型は、 `http.Handler` インタフェースを実装しています。

[[http://localhost:4000/][http://localhost:4000/]] へアクセスし、動きを確認してみましょう。

#appengine: *注意:*
#appengine: この例は、ウェブベースのツアーでは実行できません。
#appengine: このWebサーバを動かしてみるには、
#appengine: [[https://golang.org/dl/][Goのインストール]]
#appengine: が必要となります。

.play methods/web-servers.go

* Exercise: HTTP Handlers

以下の型を実装し、それらにServeHTTPメソッドを定義してみてください。
自分のWebサーバで、特定のパスをハンドル(取り扱い)できるように登録してみてください。

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

例えば、以下のようにハンドラを登録します:

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

サーバを起動した後、
[[http://localhost:4000/string][http://localhost:4000/string]] と
[[http://localhost:4000/struct][http://localhost:4000/struct]]
へアクセスできます。

`http.Handle` 関数についての詳細は、
[[https://golang.org/pkg/net/http/#Handle][the documentation]]
を見てください。

#appengine: *注意:*
#appengine: この例は、ウェブベースのツアーでは実行できません。
#appengine: このWebサーバを動かしてみるには、
#appengine: [[https://golang.org/dl/][Goのインストール]]
#appengine: が必要となります。

.play methods/exercise-http-handlers.go

* Images

[[https://golang.org/pkg/image/#Image][`image`]] パッケージは、以下の `Image` インタフェースを定義しています：

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

Note: `Bounds` メソッドの戻り値である `Rectangle` は、 `image` パッケージの
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]
に定義があります。

(詳細は、 [[https://golang.org/pkg/image/#Image][このドキュメント]] を参照してください。)

`color.Color` と `color.Model` は共にインタフェースですが、定義済みの `color.RGBA` と `color.RGBAModel` を使うことで、このインタフェースを無視できます。
これらのインタフェースは、[[https://golang.org/pkg/image/color/][image/color]] パッケージで定義されています。

.play methods/images.go

* Exercise: Images

前に解いた、画像ジェネレーターを覚えていますか？
今回は、データのスライスの代わりに `image.Image` インタフェースの実装を返すようにしてみましょう。

自分の `Image` 型を定義し、 [[https://golang.org/pkg/image/#Image][インタフェースを満たすのに必要なメソッド]] を実装し、 `pic.ShowImage` を呼び出してみてください。

`Bounds` は、 `image.Rect(0,`0,`w,`h)` のようにして `image.Rectangle` を返すようにします。

`ColorModel` は、 `color.RGBAModel` を返すようにします。

`At` は、ひとつの色を返します。
生成する画像の色の値 `v` を `color.RGBA{v,`v,`255,`255}` を利用して返すようにします。

.play methods/exercise-images.go

* Congratulations!

この章はこれで終わりです。

[[/list][章のリスト]]から学びたいところを見ても良いですし、
[[javascript:click('.next-page')][>]] をクリックして次の章へ進みましょう。
