Methods and interfaces
This lesson covers methods and interfaces, the constructs that define objects and their behavior.

The Go Authors
https://golang.org

* Methods

Goには、クラス( _class_ )のしくみはありませんが、型にメソッド( _method_ )を定義できます。

メソッドは、特別なレシーバ( _receiver_ )引数を関数に取ります。

レシーバは、 `func` キーワードとメソッド名の間に自身の引数リストで表現します。

この例では、 `Abs` メソッドは `v` という名前の `Vertex` 型のレシーバを持つことを意味しています。

.play methods/methods.go

* Methods are functions

メソッドは、レシーバ引数を伴う関数、でしたね？

この `Abs` は、先ほどの例から機能を変えずに通常の関数として記述しています。

.play methods/methods-funcs.go

* Methods continued

例で上げたstructの型だけではなく、任意の型(type)にもメソッドを宣言できます。

例は、 `Abs` メソッドを持つ、数値型の `MyFloat` 型です。

レシーバを伴うメソッドの宣言は、レシーバ型が同じパッケージにある必要があります。
他のパッケージに定義している型に対して、レシーバを伴うメソッドを宣言できません
（組み込みの `int` などの型も同様です）。

.play methods/methods-continued.go

* Pointer receivers

ポインタレシーバでメソッドを宣言できます。

これはレシーバの型が、ある型 `T` への構文 `*T` があることを意味します。
（なお、 `T` は `*int` のようなポインタ自身を取ることはできません）

例では `*Vertex` に `Scale` メソッドが定義されています。

ポインタレシーバを持つメソッド(ここでは `Scale` )は、レシーバが指す変数を変更できます。
レシーバ自身を更新することが多いため、変数レシーバよりもポインタレシーバの方が一般的です。

`Scale` の宣言(line 16)から `*` を消し、プログラムの振る舞いがどう変わるのかを確認してみましょう。

変数レシーバでは、 `Scale` メソッドの操作は元の `Vertex` 変数のコピーを操作します。
（これは関数の引数としての振るまいと同じです）。
つまり `main` 関数で宣言した `Vertex` 変数を変更するためには、`Scale` メソッドはポインタレシーバにする必要があるのです。

.play methods/methods-pointers.go

* Pointers and functions

ここで、 `Abs` と `Scale` メソッドは関数として書きなおしてあります。

再度、line 16から `*` を消してください。
なぜ振る舞いが変わったのかわかりますか？
コンパイルするために、さらに何が必要でしょうか。

(よくわからなくても、次のページに行きましょう)

.play methods/methods-pointers-explained.go

* Methods and pointer indirection

下の2つの呼び出しを比べると、ポインタを引数に取る `ScaleFunc` 関数は、ポインタを渡す必要があることに気がつくでしょう:

	var v Vertex
	ScaleFunc(v)  // Compile error!
	ScaleFunc(&v) // OK

メソッドがポインタレシーバである場合、呼び出し時に、変数、または、ポインタのいずれかのレシーバとして取ることができます:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

`v.Scale(5)` のステートメントでは、 `v` は変数であり、ポインタではありません。
メソッドでポインタレシーバが自動的に呼びだされます。
`Scale` メソッドはポインタレシーバを持つ場合、Goは利便性のため、 `v.Scale(5)` のステートメントを `(&v).Scale(5)` として解釈します。

.play methods/indirection.go

* Methods and pointer indirection (2)


逆にも見てみましょう。

変数の引数を取る関数は、特定の型の変数を取る必要があります:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

メソッドが変数レシーバである場合、呼び出し時に、変数、または、ポインタのいずれかのレシーバとして取ることができます:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

この場合、 `p.Abs()` は `(*p).Abs()` として解釈されます。

.play methods/indirection-values.go

* Choosing a value or pointer receiver

ポインタレシーバを使う2つの理由があります。

ひとつは、メソッドがレシーバが指す先の変数を変更するためです。

ふたつに、メソッドの呼び出し毎に変数のコピーを避けるためです。
例えば、レシーバが大きな構造体である場合に効率的です。

例では、 `Abs` メソッドはレシーバ自身を変更する必要はありませんが、 `Scale` と `Abs` は両方とも `*Vertex` 型のレシーバです。

一般的には、変数レシーバ、または、ポインタレシーバのどちらかですべてのメソッドを与え、混在させるべきではありません。
(この理由は数ページ後にわかります)

.play methods/methods-with-pointer-receivers.go

* Interfaces

interface(インタフェース)型は、メソッドのシグニチャの集まりで定義します。

そのメソッドの集まりを実装した値を、interface型の変数へ持たせることができます。

*注意:* この例は、22行目でエラーになります。
`Abs` メソッドが、 `Vertex` ではなく `*Vertex` の定義であり、
`Vertex` が `Abser` インタフェースを実装していないということになるためエラーとなります。

.play methods/interfaces.go

* Interfaces are implemented implicitly

型にメソッドを実装していくことによって、インタフェースを実装(満た)します。
インタフェースを実装することを明示的に宣言する必要はありません( "implements" キーワードは必要ありません)。

Implicit interfaces decouple the definition of an interface from its
implementation, which could then appear in any package without prearrangement.

.play methods/interfaces-are-satisfied-implicitly.go

* Interface values

Under the covers, interface values can be thought of as a tuple of a value and a
concrete type:

	(value, type)

An interface value holds a value of a specific underlying concrete type.

Calling a method on an interface value executes the method of the same name on
its underlying type.

.play methods/interface-values.go

* Interface values with nil underlying values

If the concrete value inside the interface itself is nil,
the method will be called with a nil receiver.

In some languages this would trigger a null pointer exception,
but in Go it is common to write methods that gracefully handle being called
with a nil receiver (as with the method `M` in this example.)

Note that an interface value that holds a nil concrete value is itself non-nil.

.play methods/interface-values-with-nil.go

* Nil interface values

A nil interface value holds neither value nor concrete type.

Calling a method on a nil interface is a run-time error because there is no
type inside the interface tuple to indicate which _concrete_ method to call.

.play methods/nil-interface-values.go

* The empty interface

The interface type that specifies zero methods is known as the _empty_interface_:

	interface{}

An empty interface may hold values of any type.
(Every type implements at least zero methods.)

Empty interfaces are used by code that handles values of unknown type.
For example, `fmt.Print` takes any number of arguments of type `interface{}`.

.play methods/empty-interface.go

* Type assertions

A _type_assertion_ provides access to an interface value's underlying concrete value.

	t := i.(T)

This statement asserts that the interface value `i` holds the concrete type `T`
and assigns the underlying `T` value to the variable `t`.

If `i` does not hold a `T`, the statement will trigger a panic.

To _test_ whether an interface value holds a specific type,
a type assertion can return two values: the underlying value
and a boolean value that reports whether the assertion succeeded.

	t, ok := i.(T)

If `i` holds a `T`, then `t` will be the underlying value and `ok` will be true.

If not, `ok` will be false and `t` will be the zero value of type `T`,
and no panic occurs.

Note the similarity between this syntax and that of reading from a map.

.play methods/type-assertions.go

* Type switches

A _type_switch_ is a construct that permits several type assertions in series.

A type switch is like a regular switch statement, but the cases in a type
switch specify types (not values), and those values are compared against
the type of the value held by the given interface value.

	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

The declaration in a type switch has the same syntax as a type assertion `i.(T)`,
but the specific type `T` is replaced with the keyword `type`.

This switch statement tests whether the interface value `i`
holds a value of type `T` or `S`.
In each of the `T` and `S` cases, the variable `v` will be of type
`T` or `S` respectively and hold the value held by `i`.
In the default case (where there is no match), the variable `v` is
of the same interface type and value as `i`.

.play methods/type-switches.go

* Stringers

もっともよく使われているinterfaceの一つに [[//golang.org/pkg/fmt/][`fmt` パッケージ]] に定義されている [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] があります:

	type Stringer interface {
		String() string
	}

`Stringer` インタフェースは、stringとして表現することができる型です。
`fmt` パッケージ(と、多くのパッケージ)では、変数を文字列で出力するためにこのインタフェースがあることを確認します。

.play methods/stringer.go

* Exercise: Stringers

`IPAddr` 型を実装してみましょう
IPアドレスをドットで4つに区切った( _dotted_quad_ )表現で出力するため、 `fmt.Stringer` インタフェースを実装してください。

例えば、 `IPAddr{1,`2,`3,`4}` は、 `"1.2.3.4"` として出力するようにします。

.play methods/exercise-stringer.go

* Errors

Goのプログラムは、エラーの状態を `error` 変数で表現します。

`error` 型は `fmt.Stringer` に似た組み込みのインタフェースです:

	type error interface {
		Error() string
	}

( `fmt.Stringer` と同様に、 `fmt` パッケージは、変数を文字列で出力する際に `error` インタフェースを確認します。 )

よく、関数は `error` 変数を返します。そして、呼び出し元はエラーが `nil` かどうかを確認することでエラーをハンドル(取り扱い)します。

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

nil の `error` は成功したことを示し、 nilではない `error` は失敗したことを示します。

.play methods/errors.go

* Exercise: Errors

`Sqrt` 関数を [[/flowcontrol/8][以前の演習]] からコピーし、 `error` の値を返すように修正してみてください。

`Sqrt` は、複素数をサポートしていないので、負の値が与えられたとき、nil以外のエラー値を返す必要があります。

新しい型:

	type ErrNegativeSqrt float64

を作成してください。

そして、 `ErrNegativeSqrt(-2).Error()` で、 `"cannot`Sqrt`negative`number:`-2"` を返すような:

	func (e ErrNegativeSqrt) Error() string

メソッドを実装し、 `error` インタフェースを満たすようにします。

*注意:* `Error` メソッドの中で、 `fmt.Sprint(e)` を呼び出すことは、無限ループのプログラムになることでしょう。
最初に `fmt.Sprint(float64(e))` として `e` を変換しておくことで、これを避けることができます。
なぜでしょうか？

負の値が与えられたとき、 `ErrNegativeSqrt` の値を返すように `Sqrt` 関数を修正してみてください。

.play methods/exercise-errors.go

* Readers

`io` パッケージは、データストリームを読むことを表現する `io.Reader` インタフェースを規定しています。

Goの標準ライブラリには、インタフェース、ファイル、ネットワーク接続、圧縮、暗号化、などで [[https://golang.org/search?q=Read#Global][多くの実装]] があります。

`io.Reader` インタフェースは `Read` メソッドを持ちます:

	func (T) Read(b []byte) (n int, err error)

`Read` は、データを与えられたバイトスライスへ入れ、入れたバイトのサイズとエラーの値を返します。
ストリームの終端は、 `io.EOF` のエラーで返します。

例のコードは、 [[//golang.org/pkg/strings/#Reader][`strings.Reader`]] を作成し、
8 byte毎に読み出しています。

.play methods/reader.go

* Exercise: Readers

ASCII文字 `'A'` の無限ストリームを出力する `Reader` 型を実装してください。

.play methods/exercise-reader.go

* Exercise: rot13Reader

よくあるパターンは、別の `io.Reader` をラップし、ストリームの内容を何らかの方法で変換する[[https://golang.org/pkg/io/#Reader][io.Reader]]です。

例えば、 [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] は、 `io.Reader` (gzipされたデータストリーム)を引数で受け取り、 `*gzip.Reader` を返します。
その `*gzip.Reader` は、 `io.Reader` (展開したデータストリーム)を実装しています。

`io.Reader` を実装し、 `io.Reader` で[[https://ja.wikipedia.org/wiki/ROT13][ROT13]] 換字式暗号( _substitution_cipher_ )をすべてのアルファベットの文字に適用して読み出すように `rot13Reader` を実装してみてください。

`rot13Reader` 型は提供済みです。
この `Read` メソッドを実装することで `io.Reader` インタフェースを満たしてください。

.play methods/exercise-rot-reader.go

* Images

[[https://golang.org/pkg/image/#Image][`image`]] パッケージは、以下の `Image` インタフェースを定義しています：

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

Note: `Bounds` メソッドの戻り値である `Rectangle` は、 `image` パッケージの
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]
に定義があります。

(詳細は、 [[https://golang.org/pkg/image/#Image][このドキュメント]] を参照してください。)

`color.Color` と `color.Model` は共にインタフェースですが、定義済みの `color.RGBA` と `color.RGBAModel` を使うことで、このインタフェースを無視できます。
これらのインタフェースは、[[https://golang.org/pkg/image/color/][image/color]] パッケージで定義されています。

.play methods/images.go

* Exercise: Images

前に解いた、画像ジェネレーターを覚えていますか？
今回は、データのスライスの代わりに `image.Image` インタフェースの実装を返すようにしてみましょう。

自分の `Image` 型を定義し、 [[https://golang.org/pkg/image/#Image][インタフェースを満たすのに必要なメソッド]] を実装し、 `pic.ShowImage` を呼び出してみてください。

`Bounds` は、 `image.Rect(0,`0,`w,`h)` のようにして `image.Rectangle` を返すようにします。

`ColorModel` は、 `color.RGBAModel` を返すようにします。

`At` は、ひとつの色を返します。
生成する画像の色の値 `v` を `color.RGBA{v,`v,`255,`255}` を利用して返すようにします。

.play methods/exercise-images.go

* Congratulations!

この章はこれで終わりです。

[[/list][章のリスト]]から学びたいところを見ても良いですし、
[[javascript:click('.next-page')][>]] をクリックして次の章へ進みましょう。
